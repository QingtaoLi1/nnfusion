[
  {
    "nodes": [
      3
    ],
    "node_names": [
      "fused_op_3"
    ],
    "group_id": 0,
    "input_desc": [
      [
        3,
        0
      ],
      [
        3,
        1
      ],
      [
        3,
        2
      ]
    ],
    "output_desc": [
      [
        3,
        0
      ]
    ],
    "code": "__global__ void __launch_bounds__(128) Group0(half* __restrict__ input0, half* __restrict__ input1, float* __restrict__ input2, half* __restrict__ output0) {\n  \n  __shared__ float input2_shared[64];\n  float normal_reduce_temp0[1];\n  __shared__ half input0_shared[1024];\n  __shared__ float m6_shared[1024];\n  float red_buf0[1];\n  if (((int)threadIdx.y) < 8) {\n    input2_shared[((((int)threadIdx.y) * 8) + ((int)threadIdx.x))] = input2[((((int)threadIdx.y) * 8) + ((int)threadIdx.x))];\n  }\n  normal_reduce_temp0[0] = 0.000000e+00f;\n  *(uint4*)(input0_shared + ((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 8))) = *(uint4*)(input0 + ((((((int)threadIdx.y) * 16384) + ((((int)threadIdx.x) >> 1) * 4096)) + (((int)blockIdx.x) * 16)) + ((((int)threadIdx.x) & 1) * 8)));\n  __syncthreads();\n  float4 __1;\n    float4 __2;\n    uint2 __3 = *(uint2*)(input1 + ((((((int)threadIdx.y) * 8192) + ((((int)threadIdx.x) >> 2) * 4096)) + (((int)blockIdx.x) * 16)) + ((((int)threadIdx.x) & 3) * 4)));\n    __2.x = (float)(((half2*)(&(__3.x)))->x);\n    __2.y = (float)(((half2*)(&(__3.x)))->y);\n    __2.z = (float)(((half2*)(&(__3.y)))->x);\n    __2.w = (float)(((half2*)(&(__3.y)))->y);\n    float4 __4 = make_float4(sqrtf(input2_shared[((((int)threadIdx.y) * 2) + (((int)threadIdx.x) >> 2))]), sqrtf(input2_shared[((((int)threadIdx.y) * 2) + (((int)threadIdx.x) >> 2))]), sqrtf(input2_shared[((((int)threadIdx.y) * 2) + (((int)threadIdx.x) >> 2))]), sqrtf(input2_shared[((((int)threadIdx.y) * 2) + (((int)threadIdx.x) >> 2))]));\n    __1.x = (__2.x/__4.x);\n    __1.y = (__2.y/__4.y);\n    __1.z = (__2.z/__4.z);\n    __1.w = (__2.w/__4.w);\n  *(float4*)(m6_shared + ((((int)threadIdx.y) * 32) + (((int)threadIdx.x) * 4))) = __1;\n  float4 __5;\n    float4 __6;\n    uint2 __7 = *(uint2*)(input1 + (((((((int)threadIdx.y) * 8192) + ((((int)threadIdx.x) >> 2) * 4096)) + (((int)blockIdx.x) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 131072));\n    __6.x = (float)(((half2*)(&(__7.x)))->x);\n    __6.y = (float)(((half2*)(&(__7.x)))->y);\n    __6.z = (float)(((half2*)(&(__7.y)))->x);\n    __6.w = (float)(((half2*)(&(__7.y)))->y);\n    float4 __8 = make_float4(sqrtf(input2_shared[(((((int)threadIdx.y) * 2) + (((int)threadIdx.x) >> 2)) + 32)]), sqrtf(input2_shared[(((((int)threadIdx.y) * 2) + (((int)threadIdx.x) >> 2)) + 32)]), sqrtf(input2_shared[(((((int)threadIdx.y) * 2) + (((int)threadIdx.x) >> 2)) + 32)]), sqrtf(input2_shared[(((((int)threadIdx.y) * 2) + (((int)threadIdx.x) >> 2)) + 32)]));\n    __5.x = (__6.x/__8.x);\n    __5.y = (__6.y/__8.y);\n    __5.z = (__6.z/__8.z);\n    __5.w = (__6.w/__8.w);\n  *(float4*)(m6_shared + (((((int)threadIdx.y) * 32) + (((int)threadIdx.x) * 4)) + 512)) = __5;\n  __syncthreads();\n  for (int S_inner_outer = 0; S_inner_outer < 8; ++S_inner_outer) {\n    normal_reduce_temp0[0] = (normal_reduce_temp0[0] + (((float)input0_shared[(((S_inner_outer * 128) + (((int)threadIdx.x) * 16)) + ((int)threadIdx.y))]) * ((float)((half)m6_shared[(((S_inner_outer * 128) + (((int)threadIdx.x) * 16)) + ((int)threadIdx.y))]))));\n  }\n  uint mask[1];\n  float t0[1];\n  red_buf0[0] = normal_reduce_temp0[0];\n  mask[0] = (__activemask() & ((uint)(255 << (((int)threadIdx.y) * 8))));\n  t0[0] = __shfl_down_sync(mask[0], red_buf0[0], 4, 32);\n  red_buf0[0] = (red_buf0[0] + t0[0]);\n  t0[0] = __shfl_down_sync(mask[0], red_buf0[0], 2, 32);\n  red_buf0[0] = (red_buf0[0] + t0[0]);\n  t0[0] = __shfl_down_sync(mask[0], red_buf0[0], 1, 32);\n  red_buf0[0] = (red_buf0[0] + t0[0]);\n  red_buf0[0] = __shfl_sync(mask[0], red_buf0[0], (((int)threadIdx.y) * 8), 32);\n  output0[((((int)blockIdx.x) * 16) + ((int)threadIdx.y))] = ((half)red_buf0[0]);\n}\n\n",
    "block_size": [
      8,
      16,
      1
    ],
    "grid_size": [
      256,
      1,
      1
    ],
    "latency": 0.004606175702065229,
    "name": "Group0",
    "gain": 0
  }
]