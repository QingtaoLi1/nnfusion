[
  {
    "nodes": [
      3
    ],
    "node_names": [
      "fused_op_3"
    ],
    "group_id": 0,
    "input_desc": [
      [
        3,
        0
      ],
      [
        3,
        1
      ],
      [
        3,
        2
      ]
    ],
    "output_desc": [
      [
        3,
        0
      ]
    ],
    "code": "__global__ void __launch_bounds__(128) Group0(half* __restrict__ input0, half* __restrict__ input1, float* __restrict__ input2, half* __restrict__ output0) {\n  \n  __shared__ float input2_shared[1024];\n  float normal_reduce_temp0[1];\n  __shared__ half input0_shared[4096];\n  __shared__ float m6_shared[4096];\n  float red_buf0[1];\n  input2_shared[((((int)threadIdx.y) * 4) + ((int)threadIdx.x))] = input2[((((int)threadIdx.y) * 4) + ((int)threadIdx.x))];\n  input2_shared[(((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 128)] = input2[(((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 128)];\n  input2_shared[(((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 256)] = input2[(((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 256)];\n  input2_shared[(((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 384)] = input2[(((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 384)];\n  input2_shared[(((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 512)] = input2[(((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 512)];\n  input2_shared[(((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 640)] = input2[(((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 640)];\n  input2_shared[(((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 768)] = input2[(((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 768)];\n  input2_shared[(((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 896)] = input2[(((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 896)];\n  normal_reduce_temp0[0] = 0.000000e+00f;\n  for (int S_outer = 0; S_outer < 8; ++S_outer) {\n    __syncthreads();\n    *(uint4*)(input0_shared + ((((int)threadIdx.y) * 32) + (((int)threadIdx.x) * 8))) = *(uint4*)(input0 + ((((S_outer * 1048576) + (((int)threadIdx.y) * 8192)) + (((int)blockIdx.x) * 32)) + (((int)threadIdx.x) * 8)));\n    *(uint4*)(input0_shared + (((((int)threadIdx.y) * 32) + (((int)threadIdx.x) * 8)) + 1024)) = *(uint4*)(input0 + (((((S_outer * 1048576) + (((int)threadIdx.y) * 8192)) + (((int)blockIdx.x) * 32)) + (((int)threadIdx.x) * 8)) + 262144));\n    *(uint4*)(input0_shared + (((((int)threadIdx.y) * 32) + (((int)threadIdx.x) * 8)) + 2048)) = *(uint4*)(input0 + (((((S_outer * 1048576) + (((int)threadIdx.y) * 8192)) + (((int)blockIdx.x) * 32)) + (((int)threadIdx.x) * 8)) + 524288));\n    *(uint4*)(input0_shared + (((((int)threadIdx.y) * 32) + (((int)threadIdx.x) * 8)) + 3072)) = *(uint4*)(input0 + (((((S_outer * 1048576) + (((int)threadIdx.y) * 8192)) + (((int)blockIdx.x) * 32)) + (((int)threadIdx.x) * 8)) + 786432));\n    float4 __1;\n      float4 __2;\n      uint2 __3 = *(uint2*)(input1 + (((((S_outer * 1048576) + ((((int)threadIdx.y) >> 1) * 8192)) + (((int)blockIdx.x) * 32)) + ((((int)threadIdx.y) & 1) * 16)) + (((int)threadIdx.x) * 4)));\n      __2.x = (float)(((half2*)(&(__3.x)))->x);\n      __2.y = (float)(((half2*)(&(__3.x)))->y);\n      __2.z = (float)(((half2*)(&(__3.y)))->x);\n      __2.w = (float)(((half2*)(&(__3.y)))->y);\n      float4 __4 = make_float4(sqrtf(input2_shared[((S_outer * 128) + (((int)threadIdx.y) >> 1))]), sqrtf(input2_shared[((S_outer * 128) + (((int)threadIdx.y) >> 1))]), sqrtf(input2_shared[((S_outer * 128) + (((int)threadIdx.y) >> 1))]), sqrtf(input2_shared[((S_outer * 128) + (((int)threadIdx.y) >> 1))]));\n      __1.x = (__2.x/__4.x);\n      __1.y = (__2.y/__4.y);\n      __1.z = (__2.z/__4.z);\n      __1.w = (__2.w/__4.w);\n    *(float4*)(m6_shared + ((((int)threadIdx.y) * 16) + (((int)threadIdx.x) * 4))) = __1;\n    float4 __5;\n      float4 __6;\n      uint2 __7 = *(uint2*)(input1 + ((((((S_outer * 1048576) + ((((int)threadIdx.y) >> 1) * 8192)) + (((int)blockIdx.x) * 32)) + ((((int)threadIdx.y) & 1) * 16)) + (((int)threadIdx.x) * 4)) + 131072));\n      __6.x = (float)(((half2*)(&(__7.x)))->x);\n      __6.y = (float)(((half2*)(&(__7.x)))->y);\n      __6.z = (float)(((half2*)(&(__7.y)))->x);\n      __6.w = (float)(((half2*)(&(__7.y)))->y);\n      float4 __8 = make_float4(sqrtf(input2_shared[(((S_outer * 128) + (((int)threadIdx.y) >> 1)) + 16)]), sqrtf(input2_shared[(((S_outer * 128) + (((int)threadIdx.y) >> 1)) + 16)]), sqrtf(input2_shared[(((S_outer * 128) + (((int)threadIdx.y) >> 1)) + 16)]), sqrtf(input2_shared[(((S_outer * 128) + (((int)threadIdx.y) >> 1)) + 16)]));\n      __5.x = (__6.x/__8.x);\n      __5.y = (__6.y/__8.y);\n      __5.z = (__6.z/__8.z);\n      __5.w = (__6.w/__8.w);\n    *(float4*)(m6_shared + (((((int)threadIdx.y) * 16) + (((int)threadIdx.x) * 4)) + 512)) = __5;\n    float4 __9;\n      float4 __10;\n      uint2 __11 = *(uint2*)(input1 + ((((((S_outer * 1048576) + ((((int)threadIdx.y) >> 1) * 8192)) + (((int)blockIdx.x) * 32)) + ((((int)threadIdx.y) & 1) * 16)) + (((int)threadIdx.x) * 4)) + 262144));\n      __10.x = (float)(((half2*)(&(__11.x)))->x);\n      __10.y = (float)(((half2*)(&(__11.x)))->y);\n      __10.z = (float)(((half2*)(&(__11.y)))->x);\n      __10.w = (float)(((half2*)(&(__11.y)))->y);\n      float4 __12 = make_float4(sqrtf(input2_shared[(((S_outer * 128) + (((int)threadIdx.y) >> 1)) + 32)]), sqrtf(input2_shared[(((S_outer * 128) + (((int)threadIdx.y) >> 1)) + 32)]), sqrtf(input2_shared[(((S_outer * 128) + (((int)threadIdx.y) >> 1)) + 32)]), sqrtf(input2_shared[(((S_outer * 128) + (((int)threadIdx.y) >> 1)) + 32)]));\n      __9.x = (__10.x/__12.x);\n      __9.y = (__10.y/__12.y);\n      __9.z = (__10.z/__12.z);\n      __9.w = (__10.w/__12.w);\n    *(float4*)(m6_shared + (((((int)threadIdx.y) * 16) + (((int)threadIdx.x) * 4)) + 1024)) = __9;\n    float4 __13;\n      float4 __14;\n      uint2 __15 = *(uint2*)(input1 + ((((((S_outer * 1048576) + ((((int)threadIdx.y) >> 1) * 8192)) + (((int)blockIdx.x) * 32)) + ((((int)threadIdx.y) & 1) * 16)) + (((int)threadIdx.x) * 4)) + 393216));\n      __14.x = (float)(((half2*)(&(__15.x)))->x);\n      __14.y = (float)(((half2*)(&(__15.x)))->y);\n      __14.z = (float)(((half2*)(&(__15.y)))->x);\n      __14.w = (float)(((half2*)(&(__15.y)))->y);\n      float4 __16 = make_float4(sqrtf(input2_shared[(((S_outer * 128) + (((int)threadIdx.y) >> 1)) + 48)]), sqrtf(input2_shared[(((S_outer * 128) + (((int)threadIdx.y) >> 1)) + 48)]), sqrtf(input2_shared[(((S_outer * 128) + (((int)threadIdx.y) >> 1)) + 48)]), sqrtf(input2_shared[(((S_outer * 128) + (((int)threadIdx.y) >> 1)) + 48)]));\n      __13.x = (__14.x/__16.x);\n      __13.y = (__14.y/__16.y);\n      __13.z = (__14.z/__16.z);\n      __13.w = (__14.w/__16.w);\n    *(float4*)(m6_shared + (((((int)threadIdx.y) * 16) + (((int)threadIdx.x) * 4)) + 1536)) = __13;\n    float4 __17;\n      float4 __18;\n      uint2 __19 = *(uint2*)(input1 + ((((((S_outer * 1048576) + ((((int)threadIdx.y) >> 1) * 8192)) + (((int)blockIdx.x) * 32)) + ((((int)threadIdx.y) & 1) * 16)) + (((int)threadIdx.x) * 4)) + 524288));\n      __18.x = (float)(((half2*)(&(__19.x)))->x);\n      __18.y = (float)(((half2*)(&(__19.x)))->y);\n      __18.z = (float)(((half2*)(&(__19.y)))->x);\n      __18.w = (float)(((half2*)(&(__19.y)))->y);\n      float4 __20 = make_float4(sqrtf(input2_shared[(((S_outer * 128) + (((int)threadIdx.y) >> 1)) + 64)]), sqrtf(input2_shared[(((S_outer * 128) + (((int)threadIdx.y) >> 1)) + 64)]), sqrtf(input2_shared[(((S_outer * 128) + (((int)threadIdx.y) >> 1)) + 64)]), sqrtf(input2_shared[(((S_outer * 128) + (((int)threadIdx.y) >> 1)) + 64)]));\n      __17.x = (__18.x/__20.x);\n      __17.y = (__18.y/__20.y);\n      __17.z = (__18.z/__20.z);\n      __17.w = (__18.w/__20.w);\n    *(float4*)(m6_shared + (((((int)threadIdx.y) * 16) + (((int)threadIdx.x) * 4)) + 2048)) = __17;\n    float4 __21;\n      float4 __22;\n      uint2 __23 = *(uint2*)(input1 + ((((((S_outer * 1048576) + ((((int)threadIdx.y) >> 1) * 8192)) + (((int)blockIdx.x) * 32)) + ((((int)threadIdx.y) & 1) * 16)) + (((int)threadIdx.x) * 4)) + 655360));\n      __22.x = (float)(((half2*)(&(__23.x)))->x);\n      __22.y = (float)(((half2*)(&(__23.x)))->y);\n      __22.z = (float)(((half2*)(&(__23.y)))->x);\n      __22.w = (float)(((half2*)(&(__23.y)))->y);\n      float4 __24 = make_float4(sqrtf(input2_shared[(((S_outer * 128) + (((int)threadIdx.y) >> 1)) + 80)]), sqrtf(input2_shared[(((S_outer * 128) + (((int)threadIdx.y) >> 1)) + 80)]), sqrtf(input2_shared[(((S_outer * 128) + (((int)threadIdx.y) >> 1)) + 80)]), sqrtf(input2_shared[(((S_outer * 128) + (((int)threadIdx.y) >> 1)) + 80)]));\n      __21.x = (__22.x/__24.x);\n      __21.y = (__22.y/__24.y);\n      __21.z = (__22.z/__24.z);\n      __21.w = (__22.w/__24.w);\n    *(float4*)(m6_shared + (((((int)threadIdx.y) * 16) + (((int)threadIdx.x) * 4)) + 2560)) = __21;\n    float4 __25;\n      float4 __26;\n      uint2 __27 = *(uint2*)(input1 + ((((((S_outer * 1048576) + ((((int)threadIdx.y) >> 1) * 8192)) + (((int)blockIdx.x) * 32)) + ((((int)threadIdx.y) & 1) * 16)) + (((int)threadIdx.x) * 4)) + 786432));\n      __26.x = (float)(((half2*)(&(__27.x)))->x);\n      __26.y = (float)(((half2*)(&(__27.x)))->y);\n      __26.z = (float)(((half2*)(&(__27.y)))->x);\n      __26.w = (float)(((half2*)(&(__27.y)))->y);\n      float4 __28 = make_float4(sqrtf(input2_shared[(((S_outer * 128) + (((int)threadIdx.y) >> 1)) + 96)]), sqrtf(input2_shared[(((S_outer * 128) + (((int)threadIdx.y) >> 1)) + 96)]), sqrtf(input2_shared[(((S_outer * 128) + (((int)threadIdx.y) >> 1)) + 96)]), sqrtf(input2_shared[(((S_outer * 128) + (((int)threadIdx.y) >> 1)) + 96)]));\n      __25.x = (__26.x/__28.x);\n      __25.y = (__26.y/__28.y);\n      __25.z = (__26.z/__28.z);\n      __25.w = (__26.w/__28.w);\n    *(float4*)(m6_shared + (((((int)threadIdx.y) * 16) + (((int)threadIdx.x) * 4)) + 3072)) = __25;\n    float4 __29;\n      float4 __30;\n      uint2 __31 = *(uint2*)(input1 + ((((((S_outer * 1048576) + ((((int)threadIdx.y) >> 1) * 8192)) + (((int)blockIdx.x) * 32)) + ((((int)threadIdx.y) & 1) * 16)) + (((int)threadIdx.x) * 4)) + 917504));\n      __30.x = (float)(((half2*)(&(__31.x)))->x);\n      __30.y = (float)(((half2*)(&(__31.x)))->y);\n      __30.z = (float)(((half2*)(&(__31.y)))->x);\n      __30.w = (float)(((half2*)(&(__31.y)))->y);\n      float4 __32 = make_float4(sqrtf(input2_shared[(((S_outer * 128) + (((int)threadIdx.y) >> 1)) + 112)]), sqrtf(input2_shared[(((S_outer * 128) + (((int)threadIdx.y) >> 1)) + 112)]), sqrtf(input2_shared[(((S_outer * 128) + (((int)threadIdx.y) >> 1)) + 112)]), sqrtf(input2_shared[(((S_outer * 128) + (((int)threadIdx.y) >> 1)) + 112)]));\n      __29.x = (__30.x/__32.x);\n      __29.y = (__30.y/__32.y);\n      __29.z = (__30.z/__32.z);\n      __29.w = (__30.w/__32.w);\n    *(float4*)(m6_shared + (((((int)threadIdx.y) * 16) + (((int)threadIdx.x) * 4)) + 3584)) = __29;\n    __syncthreads();\n    for (int S_inner_outer = 0; S_inner_outer < 32; ++S_inner_outer) {\n      normal_reduce_temp0[0] = (normal_reduce_temp0[0] + (((float)input0_shared[(((S_inner_outer * 128) + (((int)threadIdx.x) * 32)) + ((int)threadIdx.y))]) * ((float)((half)m6_shared[(((S_inner_outer * 128) + (((int)threadIdx.x) * 32)) + ((int)threadIdx.y))]))));\n    }\n  }\n  uint mask[1];\n  float t0[1];\n  red_buf0[0] = normal_reduce_temp0[0];\n  mask[0] = (__activemask() & ((uint)(15 << (((int)threadIdx.y) * 4))));\n  t0[0] = __shfl_down_sync(mask[0], red_buf0[0], 2, 32);\n  red_buf0[0] = (red_buf0[0] + t0[0]);\n  t0[0] = __shfl_down_sync(mask[0], red_buf0[0], 1, 32);\n  red_buf0[0] = (red_buf0[0] + t0[0]);\n  red_buf0[0] = __shfl_sync(mask[0], red_buf0[0], (((int)threadIdx.y) * 4), 32);\n  output0[((((int)blockIdx.x) * 32) + ((int)threadIdx.y))] = ((half)red_buf0[0]);\n}\n\n",
    "block_size": [
      4,
      32,
      1
    ],
    "grid_size": [
      256,
      1,
      1
    ],
    "latency": 0.07465311139822006,
    "name": "Group0",
    "gain": 0
  }
]