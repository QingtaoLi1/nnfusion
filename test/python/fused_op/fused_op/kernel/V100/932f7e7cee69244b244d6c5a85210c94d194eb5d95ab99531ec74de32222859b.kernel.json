[
  {
    "nodes": [
      3
    ],
    "node_names": [
      "fused_op_3"
    ],
    "group_id": 0,
    "input_desc": [
      [
        3,
        0
      ],
      [
        3,
        1
      ],
      [
        3,
        2
      ]
    ],
    "output_desc": [
      [
        3,
        0
      ]
    ],
    "code": "__global__ void __launch_bounds__(128) Group0(half* __restrict__ input0, half* __restrict__ input1, float* __restrict__ input2, half* __restrict__ output0) {\n  \n  __shared__ float input2_shared[8];\n  __shared__ half input1_shared[64];\n  if (((int)threadIdx.x) < 8) {\n    input2_shared[((int)threadIdx.x)] = input2[(((((int)blockIdx.x) >> 7) * 8) + ((int)threadIdx.x))];\n  }\n  if (((int)threadIdx.x) < 64) {\n    input1_shared[((int)threadIdx.x)] = input1[(((((int)blockIdx.x) & 127) * 64) + ((int)threadIdx.x))];\n  }\n  __syncthreads();\n  output0[(((((((int)blockIdx.x) >> 7) * 65536) + ((((int)threadIdx.x) >> 5) * 8192)) + ((((int)blockIdx.x) & 127) * 64)) + ((((int)threadIdx.x) & 31) * 2))] = (((half)(((float)input0[(((((((int)blockIdx.x) >> 7) * 65536) + ((((int)threadIdx.x) >> 5) * 8192)) + ((((int)blockIdx.x) & 127) * 64)) + ((((int)threadIdx.x) & 31) * 2))]) / sqrtf(input2_shared[(((int)threadIdx.x) >> 5)]))) * input1_shared[((((int)threadIdx.x) & 31) * 2)]);\n  output0[((((((((int)blockIdx.x) >> 7) * 65536) + ((((int)threadIdx.x) >> 5) * 8192)) + ((((int)blockIdx.x) & 127) * 64)) + ((((int)threadIdx.x) & 31) * 2)) + 32768)] = (((half)(((float)input0[((((((((int)blockIdx.x) >> 7) * 65536) + ((((int)threadIdx.x) >> 5) * 8192)) + ((((int)blockIdx.x) & 127) * 64)) + ((((int)threadIdx.x) & 31) * 2)) + 32768)]) / sqrtf(input2_shared[((((int)threadIdx.x) >> 5) + 4)]))) * input1_shared[((((int)threadIdx.x) & 31) * 2)]);\n  output0[((((((((int)blockIdx.x) >> 7) * 65536) + ((((int)threadIdx.x) >> 5) * 8192)) + ((((int)blockIdx.x) & 127) * 64)) + ((((int)threadIdx.x) & 31) * 2)) + 1)] = (((half)(((float)input0[((((((((int)blockIdx.x) >> 7) * 65536) + ((((int)threadIdx.x) >> 5) * 8192)) + ((((int)blockIdx.x) & 127) * 64)) + ((((int)threadIdx.x) & 31) * 2)) + 1)]) / sqrtf(input2_shared[(((int)threadIdx.x) >> 5)]))) * input1_shared[(((((int)threadIdx.x) & 31) * 2) + 1)]);\n  output0[((((((((int)blockIdx.x) >> 7) * 65536) + ((((int)threadIdx.x) >> 5) * 8192)) + ((((int)blockIdx.x) & 127) * 64)) + ((((int)threadIdx.x) & 31) * 2)) + 32769)] = (((half)(((float)input0[((((((((int)blockIdx.x) >> 7) * 65536) + ((((int)threadIdx.x) >> 5) * 8192)) + ((((int)blockIdx.x) & 127) * 64)) + ((((int)threadIdx.x) & 31) * 2)) + 32769)]) / sqrtf(input2_shared[((((int)threadIdx.x) >> 5) + 4)]))) * input1_shared[(((((int)threadIdx.x) & 31) * 2) + 1)]);\n}\n\n",
    "block_size": [
      128,
      1,
      1
    ],
    "grid_size": [
      4096,
      1,
      1
    ],
    "latency": 0.008444579318165779,
    "name": "Group0",
    "gain": 0
  }
]